function [y1] = neural_net(x1)
%NEURAL_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 20-Jan-2016 20:10:32.
% 
% [y1] = neural_net(x1) takes these arguments:
%   x = 12xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [21.2111263275146;-42.8025703430176;-6.57227420806885;4.53922510147095;-44.7316207885742;-2.46110773086548;-2.23019528388977;-40.6490058898926;1.08411467075348;-8.78224468231201;-29.0861682891846;1.02367210388184];
  x1_step1_gain = [0.180726427941228;0.0827783663900457;0.0789532484196283;0.0755625084999409;0.0563504231752465;0.0478333469216266;0.0571842707616672;0.0537456514298815;0.0553055698551796;0.0571722765907128;0.0716452369299303;0.0643782497224753];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.6948680607370152;-1.3518890386652449;0.0037533704449089836;-0.976109420163085;0.39964974465491693;-0.21693311988875225;-1.6202054608848082;-3.4043658413862619;-1.2833532822194207;1.7261092151959938];
  IW1_1 = [-0.11061894710135745 0.079039549462399383 -0.37715175805018147 0.42607753169262791 -0.88527015810507437 0.45963800352925421 0.34709744621025912 0.53146565864557005 -0.09460205918905501 -0.81295095214183388 0.6702760305991059 -0.12634596294440334;0.35256715176311909 -0.3551148409245391 1.0817728556090882 -0.41569676528084976 0.16958375646910348 0.35168362146388404 0.45829494748221039 0.14699390463097486 -0.24979736945740794 0.18538995059419541 0.82395468702584262 -0.23892751119028161;-0.8838624478073881 -1.5457378915331421 -0.72333482181786846 0.95887089854821794 0.41799721702504866 0.58654726387848832 1.7502693908177931 1.2986410443970178 -0.70352635221313187 -1.6360253779627474 -1.085630260980091 -0.49834419048297746;-1.3718547448476521 0.89334315158996092 -0.30701547315572686 -0.45893566475353964 1.1946479612431591 -0.61392915729935171 -0.59763104653392829 -0.71330816852916423 -0.21933971533843064 0.94635842184217778 0.93669773729164041 -0.46631794219184275;2.6161003983389874 -3.3870172120283248 -3.2980708018034539 -0.40933133842474972 1.1516523220561443 0.3159942382068941 2.3749645203139624 0.57665520009132099 1.2751497209322591 2.2606493571031021 1.1065916716858755 -0.44580288481404512;2.5301936326764229 0.57558461045058806 2.9943945149572295 2.265736349106533 -0.22525945531154587 -0.10742190844626545 2.118379252358074 -0.33683318748521135 -0.99405000313865877 0.60835855429649077 1.7544693461946828 -0.50153371849522044;-0.80335253166062681 1.9355204354919979 -0.21997067342669013 -1.9461911185840284 -1.2051901817950619 -0.91027248340162448 -0.60251386183433919 0.32746344232070229 1.0059326241787159 0.72435511974375111 0.31813322602560296 0.31341032753281761;-2.2731319513556878 1.7163691765947497 0.44044242122190996 0.20494405389671139 0.95946847159165682 -0.37244781995021203 -1.7351603556395521 0.52786522899953203 -0.33397351962518917 0.5251665087284233 -0.40967211389858987 -1.3927965337226498;-0.6547037195835711 -0.33393848800066139 0.22827575221482804 0.21325446277643387 0.66474251650224625 -0.63939124469514208 0.30162228759851567 0.46544015774868674 0.095556991936899122 0.57433353611443916 -0.79448254909979221 0.35615161303408949;0.413759023150159 0.78280519782786195 -0.83449818677361087 0.7115690811882287 -0.33647413242941715 -0.49354258217985386 0.49141432375882066 -0.37979377368864858 -0.31383544181643402 -0.17293427188222521 -0.17775482356072192 -0.058404215216867665];
  
  % Layer 2
  b2 = [0.73841588468777231;-0.29832993324398926];
  LW2_1 = [0.78169682553543829 -0.82870682251970107 2.4100623162218811 0.6692196096161972 4.6123824482423821 -3.7255618775870407 1.6712681791506803 2.2999746592291865 -0.57332138645706121 0.99895662895527015;0.62430869176757509 1.4242497593828647 -1.0294485452430688 -1.939150973149421 -4.7393380124353337 3.1182253254219066 -1.4709175117073929 -3.6266151987182429 -0.15234331705627374 -0.81439837606534993];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2];
  y1_step1_xoffset = [0;0];
  
  % ===== SIMULATION ========
  
  % Dimensions
  Q = size(x1,2); % samples
  
  % Input 1
  xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  
  % Layer 1
  a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
  
  % Layer 2
  a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
  
  % Output 1
  y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
