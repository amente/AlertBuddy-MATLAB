function [y1] = neural_net(x1)
%NEURAL_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Feb-2016 00:56:09.
% 
% [y1] = neural_net(x1) takes these arguments:
%   x = 12xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [33.1217651367188;-57.9367294311523;-9.22938442230225;4.13434839248657;-52.0801773071289;-3.87744426727295;-3.57925415039063;-45.8114280700684;0.0920843333005905;-10.6806783676147;-32.8212738037109;0.0258490778505802];
  x1_step1_gain = [0.110280511832762;0.0625838755632663;0.0647774219756596;0.0646855916656327;0.0494813248906741;0.042697283238683;0.0516073858818726;0.0488623111989787;0.0505190503432872;0.0523630699473718;0.0656748144952099;0.0589628719581747];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.6993724782791035;-1.5594405570577639;-0.029104334865207276;-0.83649470756775313;0.5782569882164823;-0.42035315078538854;-1.7584096264616473;-3.3066365553641317;-1.3190566246894091;1.7768811119498027];
  IW1_1 = [-0.11019357714511153 0.072687869943055164 -0.37930465923173012 0.43192468548598439 -0.87771887488903133 0.46455676435236443 0.33875173938640718 0.51773353135328393 -0.098519548969758938 -0.81186104790024916 0.67557259871154274 -0.12126270950199285;0.35361790728039161 -0.38150501508378115 1.1077355013416739 -0.42527743866783912 0.1294418383054742 0.32442254796874115 0.41732433081937842 0.14850123200039872 -0.20643132367621853 0.17116606174162452 0.73038230392277204 -0.2352290962834469;-1.0303409096901801 -1.5665380850752306 -0.80311596487188508 1.1735438342307536 0.81886866304585126 0.796900263802367 1.8913830405923706 1.2730008188697923 -0.96505798235048967 -1.5700854632075327 -0.55482638867123979 -0.27171234454839982;-1.5231689061494529 0.64232702029881505 -0.39518297135770641 -0.46568012779308876 1.1711007493672732 -0.47317879459889745 -0.46685778855273086 -0.77118250452837256 -0.2502096818523839 0.97483029979276481 1.1948550096203203 -0.19031967060573496;2.6223144381850862 -3.5989075503098134 -3.1780878558444892 -0.21032323793684415 1.0392413778594167 0.27975555091382143 2.3019812439951721 0.35310681605248728 1.1350715981970585 2.2018501186468402 1.3181245752505661 -0.23512578726790551;2.4898639336077397 0.79255948006141386 2.9580821355794784 2.1728499133599164 -0.13645437343601877 -0.3946982495713755 1.5707383803569557 -0.32730207586654708 -0.77245952990811872 0.60357234071939192 1.5931333557595844 -0.55087584400515466;-0.9287979831154336 1.7790602185571538 -0.23560110333575879 -2.0465080864118539 -1.3806864398359255 -0.86252553315577041 -0.36018066304846674 0.46038916063878998 0.95425670465384438 0.58425536069537143 0.38017539256247573 0.53041810290170632;-2.6838982965944016 1.7698875101253806 0.32079022543469832 0.038413063317379439 1.0425377437420553 -0.32721235507579921 -1.6106290306451219 0.68549331119496604 -0.53179259623749531 0.34758511953348287 0.00062540100859298856 -1.0120993425325606;-0.62968702985218683 -0.327397284528398 0.23124291672936201 0.20512434011302999 0.65965568482852766 -0.6395572315242849 0.29032681957422635 0.45390944447638937 0.10337943205190668 0.58890278283935671 -0.79834819669689294 0.35305628867608685;0.37516363711298328 0.78674868679811771 -0.8403269860531094 0.71309731444678637 -0.32233461917889 -0.49061155397731132 0.49357972067820122 -0.37846199876876008 -0.32674687965452448 -0.17491777659717406 -0.14615912501795053 -0.049062225264718463];
  
  % Layer 2
  b2 = [0.87252832079529319;-0.43244236935151575];
  LW2_1 = [0.92091707293123704 -0.91008817906323969 2.8041374703210704 0.79778582328394432 4.6592626944782358 -3.4074752068439333 1.8366791053968923 2.1747692907779377 -0.6726210632882752 1.1180821032427257;0.48508844437176935 1.5056311159263913 -1.423523699342262 -2.0677171868171675 -4.7862182586711803 2.8001386546787992 -1.6363284379536054 -3.5014098302669923 -0.053043640225076821 -0.93352385035279939];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2];
  y1_step1_xoffset = [0;0];
  
  % ===== SIMULATION ========
  
  % Dimensions
  Q = size(x1,2); % samples
  
  % Input 1
  xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  
  % Layer 1
  a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
  
  % Layer 2
  a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
  
  % Output 1
  y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
