function [y1] = neural_net(x1)
%NEURAL_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 21-Jan-2016 06:49:40.
% 
% [y1] = neural_net(x1) takes these arguments:
%   x = 12xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [21.2111263275146;-42.8025703430176;-6.57227420806885;4.53922557830811;-44.7316207885742;-2.46110773086548;-2.23018765449524;-40.6490058898926;1.08411467075348;-8.78223896026611;-29.0861682891846;1.02367472648621];
  x1_step1_gain = [0.180726365643349;0.0827783663900457;0.078953260309308;0.0755625098612377;0.0563504231752465;0.0478333381934899;0.0571842769987757;0.053745634556866;0.055305575689199;0.0571722984114423;0.0716452503918659;0.064378255157245];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.6968721883962998;-1.5378802035945132;-0.29348023865528022;-0.97297232998478356;0.56576992864084119;-0.57795896863990304;-1.7885005260600033;-3.1661077118127063;-1.3103626971319142;1.7714697776399095];
  IW1_1 = [-0.11102121642070661 0.073869902044544203 -0.37834192848869019 0.43035757207280817 -0.88133980239432852 0.46262231123294978 0.34380366955539371 0.52452418370599496 -0.095796107644019551 -0.81008341735561229 0.67502184771309481 -0.12371692424558149;0.35159292669244585 -0.37846016082883532 1.0994972869488726 -0.42094605015325193 0.1492741456722578 0.3365167076210332 0.41747355094560606 0.13484133344087282 -0.22439370766484551 0.17305016316221186 0.75599238440679128 -0.22569019699966816;-1.0331211165864351 -1.6217756223983311 -0.74468777668092412 1.0830331717237329 0.63387811965804863 0.75907231816195009 1.8910862986703927 1.2781188709580047 -0.79713022846063875 -1.4114042083436635 -0.6180946144762286 -0.29320453265088819;-1.4228979738249616 0.63600179969144033 -0.38121574908435357 -0.42185036236609175 1.1522421584533069 -0.5036832564918442 -0.43631664467903924 -0.73672129099943018 -0.20182199856708424 1.0800327019000895 1.1706610677231635 -0.27746424852649887;2.4204094593909264 -3.7488403547555178 -3.1674958291084514 -0.19984949399887539 1.0676770857045832 0.41354501955741368 2.3324777298647281 0.31926845539628246 1.215914742073777 2.1718398153612264 1.2049832277013024 -0.20855797212528629;2.6444147193498653 0.69593408944409352 2.9700559876653791 2.0959225514798994 -0.28742367734057067 -0.29183174168565729 1.746297168326181 -0.36358363246657671 -0.78817161174289974 0.55003557002935699 1.4347369546071711 -0.45430759111740182;-0.96247425147853005 1.7319390993748069 -0.23089256634371302 -1.9103168296249986 -1.230690649562904 -0.79377931070250507 -0.39844912417873368 0.37204102665713312 0.96118979799508497 0.74017174926162244 0.52479541971468469 0.53962622841421548;-2.5512584201825144 1.8034969476425016 0.3255154873329591 0.15201410339021962 1.063002832519587 -0.41169127318964127 -1.6358641228047179 0.68944811566637054 -0.4782568214694975 0.55248776387161158 0.11012312713800851 -1.0789066551480699;-0.6390995651236614 -0.32946940995818869 0.22937523763228007 0.20587613911028813 0.66110256340859463 -0.63991542055096473 0.29276592901644399 0.45774926033650853 0.099680125545150267 0.57966861886692866 -0.80200002438062779 0.35306158912186736;0.39190441560503436 0.7827572493648397 -0.8378022041206532 0.71308820233608683 -0.33205694216383214 -0.49290197409089942 0.49406425604836807 -0.37821869154337556 -0.31792451572262714 -0.17135044423550719 -0.15515676041721851 -0.050463094465223873];
  
  % Layer 2
  b2 = [0.85026694242598178;-0.4101809909822004];
  LW2_1 = [0.90403442558092961 -0.89310921176144942 2.5943129425574192 0.74615813569863154 4.6669719626829362 -3.4594404789869091 1.6656509465313856 2.1142938200250248 -0.65954972978612803 1.0972106056439668;0.50197109172208276 1.4886521486246138 -1.2136991715786161 -2.0160894992318541 -4.793927526875887 2.8521039268217727 -1.4653002790880942 -3.4409343595140762 -0.066114973727210466 -0.91265235275402434];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2];
  y1_step1_xoffset = [0;0];
  
  % ===== SIMULATION ========
  
  % Dimensions
  Q = size(x1,2); % samples
  
  % Input 1
  xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  
  % Layer 1
  a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
  
  % Layer 2
  a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
  
  % Output 1
  y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
