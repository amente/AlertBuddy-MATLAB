function [y1] = neural_net(x1)
%NEURAL_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-Feb-2016 00:30:46.
% 
% [y1] = neural_net(x1) takes these arguments:
%   x = 12xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [0;-60.8230819702148;-9.22938442230225;0;-56.4091033935547;-3.87744426727295;-3.57925415039063;-50.3344573974609;0;-10.6806783676147;-33.8233833312988;0];
  x1_step1_gain = [0.0347414212965877;0.0328822535000677;0.0647774219756596;0.0564973431739884;0.0354552701546488;0.042697283238683;0.0516073858818726;0.0397342119774373;0.0496767196658555;0.0523630699473718;0.0591306901621896;0.0540176480921587];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.6687584546408458;-1.3152165625415506;0.8544226269509837;0.43046690255996439;-0.56913233802421226;0.49270127491251547;-0.41669494185441436;-0.9908668684441595;-1.2892136331623036;1.6925434386580007];
  IW1_1 = [-0.14574181543899367 0.11519539314438682 -0.36608142147439132 0.401428196008834 -0.84801727713084618 0.49273578918425298 0.39987647414188932 0.56596654437361349 -0.13985044930745558 -0.86501736723571432 0.66492543633514434 -0.12883358045707119;0.21396964841493876 -0.48094084278902993 1.0071640690402164 -0.50497963587989203 0.26936533829170028 0.41405094546800336 0.43743122699934323 0.086803846150498631 -0.38747790928325465 0.029863149802203455 0.78850083357264256 -0.1647365980378957;-0.84073610744712235 -0.58664394346121973 -0.40241569868723537 0.27727985616931061 -0.25011195008632442 -0.058155385619179829 0.81326877759814808 0.61593038926197718 -0.40843302342126192 -0.41698523644943947 0.037981415947604805 -0.32785515285701711;-0.65973964321376855 0.63069208195452942 -0.43219016021775913 -0.63978075414991253 0.69153106665949349 -0.24005900308774089 0.35834481387420941 -0.45984820238765933 -0.34110677039294651 0.43677213544708676 0.74187306275568532 -0.14868272684013437;-0.57975128314052882 -2.9718187893689016 -3.0518677916590575 -0.78529137582284858 0.10756569535171759 0.071244289464945404 1.3836295939209899 -0.28010288111211301 1.5492277441259763 1.0305686848912614 -0.08061007235448088 0.049932530569713654;0.5073712318696515 2.0525694204227047 2.5631912146395517 0.18004958240687935 1.1020476606493239 -0.91538581638563699 -0.58952107591230252 -0.24002941246093779 -0.65928503880197997 -0.58501917747939158 -0.46528000343358494 -0.14121069253381258;-0.4735528169031526 -0.085196893480328328 -0.67328657906917844 -0.67735142185935782 -0.63276879219316173 0.5188763519589773 -0.081123273239499721 -0.88597576500526953 0.7843086858883852 0.35572281669386407 0.056030188272289512 0.94931485368706103;-0.55340900476970922 0.75947742137436602 -0.29874540852720283 0.30646468050398279 0.57122024986814601 0.14726903852031986 -0.61468564855377161 0.65757196437524879 -0.11932748531777253 0.69645336134445635 0.24281671260358592 -0.1342676960082638;-0.6226576913807873 -0.3668048308445811 0.23235737750486563 0.23067201145934482 0.62594075848300401 -0.6474761645642354 0.31589541460684734 0.46867958231698692 0.13963656675845668 0.59415725394468744 -0.80368721450583025 0.37785138561301579;0.42634154212252279 0.82626745436644855 -0.77858094291092028 0.61663229022909061 -0.46954457722429171 -0.46512886290877703 0.56906819902371808 -0.33956100189704302 -0.2420705136701396 -0.1905489798681923 -0.22044881588050022 0.041603729399959551];
  
  % Layer 2
  b2 = [-0.063712212793671799;0.50379816423747503];
  LW2_1 = [0.50228195241413753 -0.10086350119562516 0.69753866301086442 -0.35493574089093577 3.5298407957371913 -2.9675988603483594 0.86963527096872595 -0.72948632315202588 -0.17446227597425812 0.24992216152801364;0.90372356488887773 0.6964064380587891 0.68307510796794646 -0.91499562264228396 -3.6567963599301323 2.3602623081832217 -0.66928460352543584 -0.59715421633702792 -0.55120242753908077 -0.065363908638090829];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2];
  y1_step1_xoffset = [0;0];
  
  % ===== SIMULATION ========
  
  % Dimensions
  Q = size(x1,2); % samples
  
  % Input 1
  xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  
  % Layer 1
  a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
  
  % Layer 2
  a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
  
  % Output 1
  y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
