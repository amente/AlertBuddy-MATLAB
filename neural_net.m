function [y1] = neural_net(x1)
%NEURAL_NET neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 27-Nov-2015 21:55:09.
% 
% [y1] = neural_net(x1) takes these arguments:
%   x = 12xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-2.08797774911884;-36.5834763642177;2.48177150762812;-50.9750011175914;0.581755371905877;-49.7803995362286;5.08560201355282;-43.7774864345304;-14.0132047233171;-40.8614565160913;-7.13823133927105;-30.1779828230228];
  x1_step1_gain = [0.0890442425419522;0.0835934202150888;0.0658572860394974;0.0579059147971087;0.0401640704238561;0.0372661057630946;0.0423322732978614;0.0413378524545075;0.0369325947152938;0.0404099446174239;0.0431968736026172;0.0455867601264552];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [1.3866795928459301;-2.3818666460375648;-0.89943489201949867;0.4814896505017302;-0.88079206623671491;-0.1075545467840367;-1.4636284013076599;0.84163273912463332;2.339405506629693;-2.2475980067970212];
  IW1_1 = [-1.5210239851101661 1.1689617952116265 -0.61458663985189366 -1.0466671401207013 0.43170638082403079 -0.45323643778841693 -0.22527265894438894 0.15462605061326362 0.084248102684749443 -0.28154623825956365 0.43797380349232695 -0.019966153377403748;-0.622828839943107 0.99463215056697962 -1.5881717976768051 -0.60454923653201353 -0.9356418209950077 0.82869388538179622 -0.86355920672941611 -0.7735679107232255 -1.2073211967454871 2.6701984979622959 1.9637175663420723 1.2085508663923024;-0.67882218089648039 -0.96073985208274393 -0.81694837754510397 0.0081397304787519872 0.34379950319894498 1.4188533019241687 1.3764690757762506 -0.43473562747279115 -1.3022803426187197 -0.76759674051793914 0.15655946226766085 0.0924759260681077;-0.51750177214937509 -1.2234380330085974 -0.51267448199837906 -0.19732013476249291 -0.036044193960322997 0.13826794088109259 -0.53470838711459945 0.63898880616357945 -0.26852734050465826 0.72589527207175508 -0.33841646157160643 0.42601525591613543;-0.21892274952581819 -0.31391732885113383 -0.97099542301567077 -1.0619393093960698 -2.5297856708889528 0.81826526766601015 -0.1594626103454776 1.557120393017704 -1.2625169478161138 0.82598244203404025 -0.094409732385947381 1.4194043426828407;-0.76557278706069221 -0.34189206816538009 -0.58455798595693653 0.43768151404400141 0.66432346680129983 0.46192691093646732 -0.40261127517084527 0.067904906206957452 -0.054220613816864917 -0.48447723333924952 0.064783250179924048 0.64080473709688168;-2.5142530371467107 0.054383612556327302 -2.6379105480489549 -0.81090478525389453 0.5448505714898606 2.0815589456821493 0.29093475907000488 2.6441329239118225 -0.0054383839782796524 1.0395601348731391 -0.13946328466795113 0.73240638149370729;-1.0751788221082772 0.173845382196922 -1.0509567542216272 -1.1937880347144363 -0.29327792434614847 -0.038845336039234096 0.84172686768883154 -0.70412131450535687 1.4570604035303045 0.080377376572214831 1.0698807085763016 0.31706964331476883;-0.17527700488619768 -0.46665690178863822 1.0433841560540156 0.25249617812040237 2.1105776445678259 0.457856044368388 0.46010201293953024 -1.4672374584082271 -0.015495730250682363 -2.2040987507076335 -0.33887793290149798 0.51425564112704292;0.052322647502888134 0.44549270524629114 -0.33892384186376734 -0.35896220986992033 -0.60279143878469355 0.78969924008870107 -0.28613045863806813 -0.10122342355791483 0.1102057089486341 -0.16019970092962832 0.053815502655751128 0.55455791548145783];
  
  % Layer 2
  b2 = [1.7438051958154615;-0.26085002712329969];
  LW2_1 = [1.3356913909587438 3.7375742266905752 1.6321079564672114 1.502247840596417 2.6211468529854911 0.54904736922993747 4.1220350546881015 1.482508597206204 -3.303489770192892 -1.3588280843741618;-1.7352466151385755 -3.1770746272263199 -1.7089814321888996 -1.6981775886937271 -3.0014677383813608 0.64887903714510342 -4.1975539943675084 -2.7726248250387404 2.6075136187155259 0.6721498383905169];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = [2;2];
  y1_step1_xoffset = [0;0];
  
  % ===== SIMULATION ========
  
  % Dimensions
  Q = size(x1,2); % samples
  
  % Input 1
  xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  
  % Layer 1
  a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
  
  % Layer 2
  a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
  
  % Output 1
  y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
